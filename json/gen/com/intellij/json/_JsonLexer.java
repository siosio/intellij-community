/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.intellij.json;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.intellij.json.JsonElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JsonLexer.flex</tt>
 */
public class _JsonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\22\1\2\1\1\1\4\1\5\1\1\16\22\4\0\1\2\1\0"+
    "\1\10\1\0\1\21\2\0\1\12\2\0\1\7\1\20\1\27\1\13"+
    "\1\16\1\3\1\14\11\15\1\30\6\0\4\21\1\17\25\21\1\25"+
    "\1\11\1\26\1\0\1\21\1\0\1\36\3\21\1\34\1\35\5\21"+
    "\1\37\1\21\1\41\3\21\1\32\1\40\1\31\1\33\5\21\1\23"+
    "\1\0\1\24\1\0\6\22\1\6\32\22\2\0\4\21\4\0\1\21"+
    "\2\0\1\22\7\0\1\21\4\0\1\21\5\0\27\21\1\0\37\21"+
    "\1\0\u01ca\21\4\0\14\21\16\0\5\21\7\0\1\21\1\0\1\21"+
    "\21\0\160\22\5\21\1\0\2\21\2\0\4\21\10\0\1\21\1\0"+
    "\3\21\1\0\1\21\1\0\24\21\1\0\123\21\1\0\213\21\1\0"+
    "\5\22\2\0\236\21\11\0\46\21\2\0\1\21\7\0\47\21\7\0"+
    "\1\21\1\0\55\22\1\0\1\22\1\0\2\22\1\0\2\22\1\0"+
    "\1\22\10\0\33\21\5\0\3\21\15\0\5\22\6\0\1\21\4\0"+
    "\13\22\5\0\53\21\37\22\4\0\2\21\1\22\143\21\1\0\1\21"+
    "\10\22\1\0\6\22\2\21\2\22\1\0\4\22\2\21\12\22\3\21"+
    "\2\0\1\21\17\0\1\22\1\21\1\22\36\21\33\22\2\0\131\21"+
    "\13\22\1\21\16\0\12\22\41\21\11\22\2\21\4\0\1\21\5\0"+
    "\26\21\4\22\1\21\11\22\1\21\3\22\1\21\5\22\22\0\31\21"+
    "\3\22\104\0\1\21\1\0\13\21\67\0\33\22\1\0\4\22\66\21"+
    "\3\22\1\21\22\22\1\21\7\22\12\21\2\22\2\0\12\22\1\0"+
    "\7\21\1\0\7\21\1\0\3\22\1\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\1\21\3\0\4\21\2\0\1\22\1\21"+
    "\7\22\2\0\2\22\2\0\3\22\1\21\10\0\1\22\4\0\2\21"+
    "\1\0\3\21\2\22\2\0\12\22\4\21\7\0\1\21\5\0\3\22"+
    "\1\0\6\21\4\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\2\21\1\0\2\21\2\0\1\22\1\0\5\22\4\0\2\22"+
    "\2\0\3\22\3\0\1\22\7\0\4\21\1\0\1\21\7\0\14\22"+
    "\3\21\1\22\13\0\3\22\1\0\11\21\1\0\3\21\1\0\26\21"+
    "\1\0\7\21\1\0\2\21\1\0\5\21\2\0\1\22\1\21\10\22"+
    "\1\0\3\22\1\0\3\22\2\0\1\21\17\0\2\21\2\22\2\0"+
    "\12\22\1\0\1\21\17\0\3\22\1\0\10\21\2\0\2\21\2\0"+
    "\26\21\1\0\7\21\1\0\2\21\1\0\5\21\2\0\1\22\1\21"+
    "\7\22\2\0\2\22\2\0\3\22\10\0\2\22\4\0\2\21\1\0"+
    "\3\21\2\22\2\0\12\22\1\0\1\21\20\0\1\22\1\21\1\0"+
    "\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0\1\21\1\0"+
    "\2\21\3\0\2\21\3\0\3\21\3\0\14\21\4\0\5\22\3\0"+
    "\3\22\1\0\4\22\2\0\1\21\6\0\1\22\16\0\12\22\11\0"+
    "\1\21\7\0\3\22\1\0\10\21\1\0\3\21\1\0\27\21\1\0"+
    "\12\21\1\0\5\21\3\0\1\21\7\22\1\0\3\22\1\0\4\22"+
    "\7\0\2\22\1\0\2\21\6\0\2\21\2\22\2\0\12\22\22\0"+
    "\2\22\1\0\10\21\1\0\3\21\1\0\27\21\1\0\12\21\1\0"+
    "\5\21\2\0\1\22\1\21\7\22\1\0\3\22\1\0\4\22\7\0"+
    "\2\22\7\0\1\21\1\0\2\21\2\22\2\0\12\22\1\0\2\21"+
    "\17\0\2\22\1\0\10\21\1\0\3\21\1\0\51\21\2\0\1\21"+
    "\7\22\1\0\3\22\1\0\4\22\1\21\10\0\1\22\10\0\2\21"+
    "\2\22\2\0\12\22\12\0\6\21\2\0\2\22\1\0\22\21\3\0"+
    "\30\21\1\0\11\21\1\0\1\21\2\0\7\21\3\0\1\22\4\0"+
    "\6\22\1\0\1\22\1\0\10\22\22\0\2\22\15\0\60\21\1\22"+
    "\2\21\7\22\4\0\10\21\10\22\1\0\12\22\47\0\2\21\1\0"+
    "\1\21\2\0\2\21\1\0\1\21\2\0\1\21\6\0\4\21\1\0"+
    "\7\21\1\0\3\21\1\0\1\21\1\0\1\21\2\0\2\21\1\0"+
    "\4\21\1\22\2\21\6\22\1\0\2\22\1\21\2\0\5\21\1\0"+
    "\1\21\1\0\6\22\2\0\12\22\2\0\4\21\40\0\1\21\27\0"+
    "\2\22\6\0\12\22\13\0\1\22\1\0\1\22\1\0\1\22\4\0"+
    "\2\22\10\21\1\0\44\21\4\0\24\22\1\0\2\22\5\21\13\22"+
    "\1\0\44\22\11\0\1\22\71\0\53\21\24\22\1\21\12\22\6\0"+
    "\6\21\4\22\4\21\3\22\1\21\3\22\2\21\7\22\3\21\4\22"+
    "\15\21\14\22\1\21\17\22\2\0\46\21\1\0\1\21\5\0\1\21"+
    "\2\0\53\21\1\0\u014d\21\1\0\4\21\2\0\7\21\1\0\1\21"+
    "\1\0\4\21\2\0\51\21\1\0\4\21\2\0\41\21\1\0\4\21"+
    "\2\0\7\21\1\0\1\21\1\0\4\21\2\0\17\21\1\0\71\21"+
    "\1\0\4\21\2\0\103\21\2\0\3\22\40\0\20\21\20\0\125\21"+
    "\14\0\u026c\21\2\0\21\21\1\0\32\21\5\0\113\21\3\0\3\21"+
    "\17\0\15\21\1\0\4\21\3\22\13\0\22\21\3\22\13\0\22\21"+
    "\2\22\14\0\15\21\1\0\3\21\1\0\2\22\14\0\64\21\40\22"+
    "\3\0\1\21\3\0\2\21\1\22\2\0\12\22\41\0\3\22\2\0"+
    "\12\22\6\0\130\21\10\0\51\21\1\22\1\21\5\0\106\21\12\0"+
    "\35\21\3\0\14\22\4\0\14\22\12\0\12\22\36\21\2\0\5\21"+
    "\13\0\54\21\4\0\21\22\7\21\2\22\6\0\12\22\46\0\27\21"+
    "\5\22\4\0\65\21\12\22\1\0\35\22\2\0\13\22\6\0\12\22"+
    "\15\0\1\21\130\0\5\22\57\21\21\22\7\21\4\0\12\22\21\0"+
    "\11\22\14\0\3\22\36\21\15\22\2\21\12\22\54\21\16\22\14\0"+
    "\44\21\24\22\10\0\12\22\3\0\3\21\12\22\44\21\122\0\3\22"+
    "\1\0\25\22\4\21\1\22\4\21\3\22\2\21\11\0\300\21\47\22"+
    "\25\0\4\22\u0116\21\2\0\6\21\2\0\46\21\2\0\6\21\2\0"+
    "\10\21\1\0\1\21\1\0\1\21\1\0\1\21\1\0\37\21\2\0"+
    "\65\21\1\0\7\21\1\0\1\21\3\0\3\21\1\0\7\21\3\0"+
    "\4\21\2\0\6\21\4\0\15\21\5\0\3\21\1\0\7\21\16\0"+
    "\5\22\30\0\1\4\1\4\5\22\20\0\2\21\23\0\1\21\13\0"+
    "\5\22\5\0\6\22\1\0\1\21\15\0\1\21\20\0\15\21\3\0"+
    "\33\21\25\0\15\22\4\0\1\22\3\0\14\22\21\0\1\21\4\0"+
    "\1\21\2\0\12\21\1\0\1\21\3\0\5\21\6\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\4\21\1\0\13\21\2\0\4\21\5\0"+
    "\5\21\4\0\1\21\21\0\51\21\u0a77\0\57\21\1\0\57\21\1\0"+
    "\205\21\6\0\4\21\3\22\2\21\14\0\46\21\1\0\1\21\5\0"+
    "\1\21\2\0\70\21\7\0\1\21\17\0\1\22\27\21\11\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0\7\21"+
    "\1\0\7\21\1\0\7\21\1\0\40\22\57\0\1\21\u01d5\0\3\21"+
    "\31\0\11\21\6\22\1\0\5\21\2\0\5\21\4\0\126\21\2\0"+
    "\2\22\2\0\3\21\1\0\132\21\1\0\4\21\5\0\51\21\3\0"+
    "\136\21\21\0\33\21\65\0\20\21\u0200\0\u19b6\21\112\0\u51cd\21\63\0"+
    "\u048d\21\103\0\56\21\2\0\u010d\21\3\0\20\21\12\22\2\21\24\0"+
    "\57\21\1\22\4\0\12\22\1\0\31\21\7\0\1\22\120\21\2\22"+
    "\45\0\11\21\2\0\147\21\2\0\4\21\1\0\4\21\14\0\13\21"+
    "\115\0\12\21\1\22\3\21\1\22\4\21\1\22\27\21\5\22\20\0"+
    "\1\21\7\0\64\21\14\0\2\22\62\21\21\22\13\0\12\22\6\0"+
    "\22\22\6\21\3\0\1\21\4\0\12\22\34\21\10\22\2\0\27\21"+
    "\15\22\14\0\35\21\3\0\4\22\57\21\16\22\16\0\1\21\12\22"+
    "\46\0\51\21\16\22\11\0\3\21\1\22\10\21\2\22\2\0\12\22"+
    "\6\0\27\21\3\0\1\21\1\22\4\0\60\21\1\22\1\21\3\22"+
    "\2\21\2\22\5\21\2\22\1\21\1\22\1\21\30\0\3\21\2\0"+
    "\13\21\5\22\2\0\3\21\2\22\12\0\6\21\2\0\6\21\2\0"+
    "\6\21\11\0\7\21\1\0\7\21\221\0\43\21\10\22\1\0\2\22"+
    "\2\0\12\22\6\0\u2ba4\21\14\0\27\21\4\0\61\21\u2104\0\u016e\21"+
    "\2\0\152\21\46\0\7\21\14\0\5\21\5\0\1\21\1\22\12\21"+
    "\1\0\15\21\1\0\5\21\1\0\1\21\1\0\2\21\1\0\2\21"+
    "\1\0\154\21\41\0\u016b\21\22\0\100\21\2\0\66\21\50\0\15\21"+
    "\3\0\20\22\20\0\7\22\14\0\2\21\30\0\3\21\31\0\1\21"+
    "\6\0\5\21\1\0\207\21\2\0\1\22\4\0\1\21\13\0\12\22"+
    "\7\0\32\21\4\0\1\21\1\0\32\21\13\0\131\21\3\0\6\21"+
    "\2\0\6\21\2\0\6\21\2\0\3\21\3\0\2\21\3\0\2\21"+
    "\22\0\3\22\4\0\14\21\1\0\32\21\1\0\23\21\1\0\2\21"+
    "\1\0\17\21\2\0\16\21\42\0\173\21\105\0\65\21\210\0\1\22"+
    "\202\0\35\21\3\0\61\21\57\0\37\21\21\0\33\21\65\0\36\21"+
    "\2\0\44\21\4\0\10\21\1\0\5\21\52\0\236\21\2\0\12\22"+
    "\u0356\0\6\21\2\0\1\21\1\0\54\21\1\0\2\21\3\0\1\21"+
    "\2\0\27\21\252\0\26\21\12\0\32\21\106\0\70\21\6\0\2\21"+
    "\100\0\1\21\3\22\1\0\2\22\5\0\4\22\4\21\1\0\3\21"+
    "\1\0\33\21\4\0\3\22\4\0\1\22\40\0\35\21\203\0\66\21"+
    "\12\0\26\21\12\0\23\21\215\0\111\21\u03b7\0\3\22\65\21\17\22"+
    "\37\0\12\22\20\0\3\22\55\21\13\22\2\0\1\22\22\0\31\21"+
    "\7\0\12\22\6\0\3\22\44\21\16\22\1\0\12\22\100\0\3\22"+
    "\60\21\16\22\4\21\13\0\12\22\u04a6\0\53\21\15\22\10\0\12\22"+
    "\u0936\0\u036f\21\221\0\143\21\u0b9d\0\u042f\21\u33d1\0\u0239\21\u04c7\0\105\21"+
    "\13\0\1\21\56\22\20\0\4\22\15\21\u4060\0\2\21\u2163\0\5\22"+
    "\3\0\26\22\2\0\7\22\36\0\4\22\224\0\3\22\u01bb\0\125\21"+
    "\1\0\107\21\1\0\2\21\2\0\1\21\2\0\2\21\2\0\4\21"+
    "\1\0\14\21\1\0\1\21\1\0\7\21\1\0\101\21\1\0\4\21"+
    "\2\0\10\21\1\0\7\21\1\0\34\21\1\0\4\21\1\0\5\21"+
    "\1\0\1\21\3\0\7\21\1\0\u0154\21\2\0\31\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21\1\0\37\21"+
    "\1\0\31\21\1\0\37\21\1\0\31\21\1\0\10\21\2\0\62\22"+
    "\u1600\0\4\21\1\0\33\21\1\0\2\21\1\0\1\21\2\0\1\21"+
    "\1\0\12\21\1\0\4\21\1\0\1\21\1\0\1\21\6\0\1\21"+
    "\4\0\1\21\1\0\1\21\1\0\1\21\1\0\3\21\1\0\2\21"+
    "\1\0\1\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\2\21\1\0\1\21\2\0\4\21\1\0\7\21"+
    "\1\0\4\21\1\0\4\21\1\0\1\21\1\0\12\21\1\0\21\21"+
    "\5\0\3\21\1\0\5\21\1\0\21\21\u1144\0\ua6d7\21\51\0\u1035\21"+
    "\13\0\336\21\u3fe2\0\u021e\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\22\36\0\140\22\200\0\360\22\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\2\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\3\6"+
    "\1\15\1\16\1\3\2\0\1\4\1\0\1\5\3\6"+
    "\1\0\2\5\3\6\1\16\1\17\1\6\1\20\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\42\0\42\0\42\0\42\0\42\0\42"+
    "\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\42\0\u01fe\0\u0220"+
    "\0\42\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\42\0\u0132\0\u03b8\0\u0132"+
    "\0\u0132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\3\2\2\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\2\1\12\1\2\1\12"+
    "\1\2\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\3\12\1\22\3\12\1\23\43\0\2\3\2\0\1\3"+
    "\37\0\1\24\3\0\1\25\32\0\1\5\1\0\6\5"+
    "\1\26\1\27\30\5\1\6\1\0\7\6\1\30\1\31"+
    "\27\6\14\0\1\10\1\11\42\0\1\32\1\33\14\0"+
    "\1\33\21\0\2\11\1\32\1\33\14\0\1\33\13\0"+
    "\1\12\5\0\2\12\1\0\1\12\1\0\2\12\6\0"+
    "\11\12\6\0\1\12\5\0\2\12\1\0\1\12\1\0"+
    "\2\12\6\0\1\12\1\34\7\12\6\0\1\12\5\0"+
    "\2\12\1\0\1\12\1\0\2\12\6\0\5\12\1\35"+
    "\3\12\6\0\1\12\5\0\2\12\1\0\1\12\1\0"+
    "\2\12\6\0\2\12\1\36\6\12\1\24\1\0\2\24"+
    "\3\0\33\24\7\25\1\37\32\25\1\5\1\0\40\5"+
    "\1\6\1\0\40\6\14\0\2\40\37\0\3\41\2\0"+
    "\1\41\27\0\1\12\5\0\2\12\1\0\1\12\1\0"+
    "\2\12\6\0\2\12\1\42\6\12\6\0\1\12\5\0"+
    "\2\12\1\0\1\12\1\0\2\12\6\0\6\12\1\43"+
    "\2\12\6\0\1\12\5\0\2\12\1\0\1\12\1\0"+
    "\2\12\6\0\6\12\1\44\2\12\3\25\1\45\3\25"+
    "\1\37\32\25\14\0\2\40\1\0\1\33\14\0\1\33"+
    "\21\0\2\41\32\0\1\12\5\0\2\12\1\0\1\12"+
    "\1\0\2\12\6\0\3\12\1\46\5\12\6\0\1\12"+
    "\5\0\2\12\1\0\1\12\1\0\2\12\6\0\7\12"+
    "\1\47\1\12\6\0\1\12\5\0\2\12\1\0\1\12"+
    "\1\0\2\12\6\0\6\12\1\50\2\12\6\0\1\12"+
    "\5\0\2\12\1\0\1\12\1\0\2\12\6\0\3\12"+
    "\1\51\5\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[986];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\6\11\5\1\1\11\2\0\1\11"+
    "\1\0\4\1\1\0\5\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[41];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JsonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2828) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 18: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 19: break;
          case 3: 
            { return DOUBLE_QUOTED_STRING;
            }
          case 20: break;
          case 4: 
            { return SINGLE_QUOTED_STRING;
            }
          case 21: break;
          case 5: 
            { return NUMBER;
            }
          case 22: break;
          case 6: 
            { return INDENTIFIER;
            }
          case 23: break;
          case 7: 
            { return L_CURLY;
            }
          case 24: break;
          case 8: 
            { return R_CURLY;
            }
          case 25: break;
          case 9: 
            { return L_BRACKET;
            }
          case 26: break;
          case 10: 
            { return R_BRACKET;
            }
          case 27: break;
          case 11: 
            { return COMMA;
            }
          case 28: break;
          case 12: 
            { return COLON;
            }
          case 29: break;
          case 13: 
            { return LINE_COMMENT;
            }
          case 30: break;
          case 14: 
            { return BLOCK_COMMENT;
            }
          case 31: break;
          case 15: 
            { return TRUE;
            }
          case 32: break;
          case 16: 
            { return NULL;
            }
          case 33: break;
          case 17: 
            { return FALSE;
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
